}
# Run ANOVA across multiple columns and store p-values in the table
for (varprefix in varprefixes) {
p_value <- fn.anova_pvalue(table1, varprefix)
p_values_table <- rbind(p_values_table, data.frame(Variable = varprefix, P_Value = p_value))
}
# Display the p-values table
print(p_values_table)
# List of prefixes for each variable you want to analyze
varprefixes <- c('age_at_admission', 'bmi', 'admit_to_enrolled', 'ett_to_enrolled')
# Initialize an empty data frame to store the results
p_values_table <- data.frame(
Variable = character(),
P_Value = numeric(),
stringsAsFactors = FALSE
)
# Modified ANOVA function to return the p-value
fn.anova_pvalue <- function(table, varprefix) {
# Construct the column names for means and standard deviations
temp_mean <- paste0(varprefix, '_weighted_mean')
temp_sd <- paste0(varprefix, '_pooled_sd')
# Prepare data for ANOVA
means <- table[[temp_mean]]       # Column for means
sds <- table[[temp_sd]]           # Column for standard deviations
sample_sizes <- table[['n']]      # Column for sample sizes
# Construct a data frame to simulate individual observations
data <- data.frame()
for (i in seq_along(means)) {
group_data <- rnorm(n = sample_sizes[i], mean = means[i], sd = sds[i])
data <- rbind(data, data.frame(value = group_data, group = paste0("Group", i)))
}
# Perform one-way ANOVA
anova_result <- aov(value ~ group, data = data)
p_value <- summary(anova_result)[[1]]$`Pr(>F)`[1]  # Extract the p-value
return(p_value)
}
# Run ANOVA across multiple columns and store p-values in the table
for (varprefix in varprefixes) {
p_value <- fn.anova_pvalue(table1, varprefix)
p_values_table <- rbind(p_values_table, data.frame(Variable = varprefix, P_Value = p_value))
}
# Display the p-values table
print(p_values_table)
# List of prefixes for each variable you want to analyze
varprefixes <- c('age_at_admission', 'bmi', 'admit_to_enrolled', 'ett_to_enrolled')
# Initialize an empty data frame to store the results
p_values_table <- data.frame(
Variable = character(),
P_Value = numeric(),
stringsAsFactors = FALSE
)
# Modified ANOVA function to return the p-value
fn.anova_pvalue <- function(table, varprefix) {
# Construct the column names for means and standard deviations
temp_mean <- paste0(varprefix, '_weighted_mean')
temp_sd <- paste0(varprefix, '_pooled_sd')
# Prepare data for ANOVA
means <- table[[temp_mean]]       # Column for means
sds <- table[[temp_sd]]           # Column for standard deviations
sample_sizes <- table[['n']]      # Column for sample sizes
# Construct a data frame to simulate individual observations
data <- data.frame()
for (i in seq_along(means)) {
group_data <- rnorm(n = sample_sizes[i], mean = means[i], sd = sds[i])
data <- rbind(data, data.frame(value = group_data, group = paste0("Group", i)))
}
# Perform one-way ANOVA
anova_result <- aov(value ~ group, data = data)
p_value <- summary(anova_result)[[1]]$`Pr(>F)`[1]  # Extract the p-value
return(p_value)
}
# Run ANOVA across multiple columns and store p-values in the table
for (varprefix in varprefixes) {
p_value <- fn.anova_pvalue(table1, varprefix)
p_values_table <- rbind(p_values_table, data.frame(Variable = varprefix, P_Value = p_value))
}
# Display the p-values table
print(p_values_table)
# List of prefixes for each count/proportion variable you want to analyze
varprefixes_counts <- c('severe_ards', 'Assist_Control', 'Other', 'Pressure_Control')
# Run chi-squared tests across multiple columns and store p-values in the table
for (varprefix in varprefixes_counts) {
p_value <- fn.chisq(table1, varprefix)
p_values_table_counts <- rbind(p_values_table_counts, data.frame(Variable = varprefix, P_Value = p_value))
}
# List of prefixes for each variable you want to analyze
varprefixes <- c('age_at_admission', 'bmi', 'admit_to_enrolled', 'ett_to_enrolled')
# Initialize an empty data frame to store the results
p_values_table <- data.frame(
Variable = character(),
P_Value = numeric(),
stringsAsFactors = FALSE
)
# Modified ANOVA function to return the p-value
fn.anova_pvalue <- function(table, varprefix) {
# Construct the column names for means and standard deviations
temp_mean <- paste0(varprefix, '_weighted_mean')
temp_sd <- paste0(varprefix, '_pooled_sd')
# Prepare data for ANOVA
means <- table[[temp_mean]]       # Column for means
sds <- table[[temp_sd]]           # Column for standard deviations
sample_sizes <- table[['n']]      # Column for sample sizes
# Construct a data frame to simulate individual observations
data <- data.frame()
for (i in seq_along(means)) {
group_data <- rnorm(n = sample_sizes[i], mean = means[i], sd = sds[i])
data <- rbind(data, data.frame(value = group_data, group = paste0("Group", i)))
}
# Perform one-way ANOVA
anova_result <- aov(value ~ group, data = data)
p_value <- summary(anova_result)[[1]]$`Pr(>F)`[1]  # Extract the p-value
return(p_value)
}
# Run ANOVA across multiple columns and store p-values in the table
for (varprefix in varprefixes) {
p_value <- fn.anova_pvalue(table1, varprefix)
p_values_table <- rbind(p_values_table, data.frame(Variable = varprefix, P_Value = p_value))
}
# Display the p-values table
print(p_values_table)
#Repeat for Chi2 Tests
fn.chisq <- function(table, varprefix) {
temp_count <- paste0(varprefix, '_count')
temp_prop <- paste0(varprefix, '_percent')
# Extract the counts and proportions
counts <- table[[temp_count]]
proportions <- table[[temp_prop]]
# Create a table for chi-squared test
contingency_table <- cbind(counts, proportions)
# Perform the chi-squared test
chisq_result <- chisq.test(contingency_table)
p_value <- chisq_result$p.value
return(p_value)
}
# List of prefixes for each count/proportion variable you want to analyze
varprefixes_counts <- c('severe_ards', 'Assist_Control', 'Other', 'Pressure_Control')
# Run chi-squared tests across multiple columns and store p-values in the table
for (varprefix in varprefixes_counts) {
p_value <- fn.chisq(table1, varprefix)
p_values_table_counts <- rbind(p_values_table_counts, data.frame(Variable = varprefix, P_Value = p_value))
}
fn.chisq(table1, varprefix)
# List of prefixes for each variable you want to analyze
varprefixes <- c('age_at_admission', 'bmi', 'admit_to_enrolled', 'ett_to_enrolled')
# Initialize an empty data frame to store the results
p_values_table <- data.frame(
Variable = character(),
P_Value = numeric(),
stringsAsFactors = FALSE
)
# Modified ANOVA function to return the p-value
fn.anova_pvalue <- function(table, varprefix) {
# Construct the column names for means and standard deviations
temp_mean <- paste0(varprefix, '_weighted_mean')
temp_sd <- paste0(varprefix, '_pooled_sd')
# Prepare data for ANOVA
means <- table[[temp_mean]]       # Column for means
sds <- table[[temp_sd]]           # Column for standard deviations
sample_sizes <- table[['n']]      # Column for sample sizes
# Construct a data frame to simulate individual observations
data <- data.frame()
for (i in seq_along(means)) {
group_data <- rnorm(n = sample_sizes[i], mean = means[i], sd = sds[i])
data <- rbind(data, data.frame(value = group_data, group = paste0("Group", i)))
}
# Perform one-way ANOVA
anova_result <- aov(value ~ group, data = data)
p_value <- summary(anova_result)[[1]]$`Pr(>F)`[1]  # Extract the p-value
return(p_value)
}
# Run ANOVA across multiple columns and store p-values in the table
for (varprefix in varprefixes) {
p_value <- fn.anova_pvalue(table1, varprefix)
p_values_table <- rbind(p_values_table, data.frame(Variable = varprefix, P_Value = p_value))
}
# Display the p-values table
print(p_values_table)
#Repeat for Chi2 Tests
fn.chisq <- function(table, varprefix) {
temp_count <- paste0(varprefix, '_count')
temp_prop <- paste0(varprefix, '_percent')
# Extract the counts and proportions
counts <- table[[temp_count]]
proportions <- table[[temp_prop]]
# Check for NA or zero values and remove them
contingency_table <- na.omit(cbind(counts, proportions))
contingency_table <- contingency_table[rowSums(contingency_table) > 0, ]
# If table has insufficient data, return NA for the p-value
if (nrow(contingency_table) < 2 || ncol(contingency_table) < 2) {
return(NA)
}
# Perform the chi-squared or Fisher's exact test based on data sparsity
if (any(contingency_table < 5)) {
test_result <- fisher.test(contingency_table)
} else {
test_result <- chisq.test(contingency_table)
}
# Return the p-value from the test
return(test_result$p.value)
}
# List of prefixes for each count/proportion variable you want to analyze
varprefixes_counts <- c('severe_ards', 'Assist_Control', 'Other', 'Pressure_Control')
# Run chi-squared tests across multiple columns and store p-values in the table
for (varprefix in varprefixes_counts) {
p_value <- fn.chisq(table1, varprefix)
p_values_table_counts <- rbind(p_values_table_counts, data.frame(Variable = varprefix, P_Value = p_value))
}
# List of prefixes for each variable you want to analyze
varprefixes <- c('age_at_admission', 'bmi', 'admit_to_enrolled', 'ett_to_enrolled')
# Initialize an empty data frame to store the results
p_values_table <- data.frame(
Variable = character(),
P_Value = numeric(),
stringsAsFactors = FALSE
)
# Modified ANOVA function to return the p-value
fn.anova_pvalue <- function(table, varprefix) {
# Construct the column names for means and standard deviations
temp_mean <- paste0(varprefix, '_weighted_mean')
temp_sd <- paste0(varprefix, '_pooled_sd')
# Prepare data for ANOVA
means <- table[[temp_mean]]       # Column for means
sds <- table[[temp_sd]]           # Column for standard deviations
sample_sizes <- table[['n']]      # Column for sample sizes
# Construct a data frame to simulate individual observations
data <- data.frame()
for (i in seq_along(means)) {
group_data <- rnorm(n = sample_sizes[i], mean = means[i], sd = sds[i])
data <- rbind(data, data.frame(value = group_data, group = paste0("Group", i)))
}
# Perform one-way ANOVA
anova_result <- aov(value ~ group, data = data)
p_value <- summary(anova_result)[[1]]$`Pr(>F)`[1]  # Extract the p-value
return(p_value)
}
# Run ANOVA across multiple columns and store p-values in the table
for (varprefix in varprefixes) {
p_value <- fn.anova_pvalue(table1, varprefix)
p_values_table <- rbind(p_values_table, data.frame(Variable = varprefix, P_Value = p_value))
}
# Display the p-values table
print(p_values_table)
fn.chisq <- function(table, varprefix) {
temp_count <- paste0(varprefix, '_count')
temp_prop <- paste0(varprefix, '_percent')
# Extract the counts and proportions
counts <- table[[temp_count]]
proportions <- table[[temp_prop]]
# Combine counts and proportions into a contingency table, removing any missing rows
contingency_table <- na.omit(cbind(counts, proportions))
# Ensure the table has at least two columns
if (ncol(contingency_table) < 2) {
return(NA)
}
# Filter out rows with all zeros
contingency_table <- contingency_table[rowSums(contingency_table) > 0, ]
# Check if there is sufficient data for the test
if (nrow(contingency_table) < 2 || ncol(contingency_table) < 2) {
return(NA)
}
# Perform the chi-squared or Fisher's exact test based on data sparsity
if (any(contingency_table < 5)) {
test_result <- fisher.test(contingency_table)
} else {
test_result <- chisq.test(contingency_table)
}
# Return the p-value from the test
return(test_result$p.value)
}
# List of prefixes for each count/proportion variable you want to analyze
varprefixes_counts <- c('severe_ards', 'Assist_Control', 'Other', 'Pressure_Control')
# Run chi-squared tests across multiple columns and store p-values in the table
for (varprefix in varprefixes_counts) {
p_value <- fn.chisq(table1, varprefix)
p_values_table_counts <- rbind(p_values_table_counts, data.frame(Variable = varprefix, P_Value = p_value))
}
# List of prefixes for each variable you want to analyze
varprefixes <- c('age_at_admission', 'bmi', 'admit_to_enrolled', 'ett_to_enrolled')
# Initialize an empty data frame to store the results
p_values_table <- data.frame(
Variable = character(),
P_Value = numeric(),
stringsAsFactors = FALSE
)
# Modified ANOVA function to return the p-value
fn.anova_pvalue <- function(table, varprefix) {
# Construct the column names for means and standard deviations
temp_mean <- paste0(varprefix, '_weighted_mean')
temp_sd <- paste0(varprefix, '_pooled_sd')
# Prepare data for ANOVA
means <- table[[temp_mean]]       # Column for means
sds <- table[[temp_sd]]           # Column for standard deviations
sample_sizes <- table[['n']]      # Column for sample sizes
# Construct a data frame to simulate individual observations
data <- data.frame()
for (i in seq_along(means)) {
group_data <- rnorm(n = sample_sizes[i], mean = means[i], sd = sds[i])
data <- rbind(data, data.frame(value = group_data, group = paste0("Group", i)))
}
# Perform one-way ANOVA
anova_result <- aov(value ~ group, data = data)
p_value <- summary(anova_result)[[1]]$`Pr(>F)`[1]  # Extract the p-value
return(p_value)
}
# Run ANOVA across multiple columns and store p-values in the table
for (varprefix in varprefixes) {
p_value <- fn.anova_pvalue(table1, varprefix)
p_values_table <- rbind(p_values_table, data.frame(Variable = varprefix, P_Value = p_value))
}
# Display the p-values table
print(p_values_table)
fn.chisq <- function(table, varprefix) {
temp_count <- paste0(varprefix, '_count')
temp_prop <- paste0(varprefix, '_percent')
# Check if both columns exist in the table
if (!(temp_count %in% names(table)) || !(temp_prop %in% names(table))) {
return(NA)
}
# Extract the counts and proportions
counts <- table[[temp_count]]
proportions <- table[[temp_prop]]
# Combine counts and proportions into a contingency table, removing any missing rows
contingency_table <- na.omit(cbind(counts, proportions))
# Check if there are at least two columns after combining
if (ncol(contingency_table) < 2) {
return(NA)
}
# Filter out rows with all zeros
contingency_table <- contingency_table[rowSums(contingency_table) > 0, ]
# Check if there is sufficient data for the test
if (nrow(contingency_table) < 2) {
return(NA)
}
# Perform the chi-squared or Fisher's exact test based on data sparsity
if (any(contingency_table < 5)) {
test_result <- fisher.test(contingency_table)
} else {
test_result <- chisq.test(contingency_table)
}
# Return the p-value from the test
return(test_result$p.value)
}
# List of prefixes for each count/proportion variable you want to analyze
varprefixes_counts <- c('severe_ards', 'Assist_Control', 'Other', 'Pressure_Control')
# Run chi-squared tests across multiple columns and store p-values in the table
for (varprefix in varprefixes_counts) {
p_value <- fn.chisq(table1, varprefix)
p_values_table_counts <- rbind(p_values_table_counts, data.frame(Variable = varprefix, P_Value = p_value))
}
# List of prefixes for each variable you want to analyze
varprefixes <- c('age_at_admission', 'bmi', 'admit_to_enrolled', 'ett_to_enrolled')
# Initialize an empty data frame to store the results
p_values_table <- data.frame(
Variable = character(),
P_Value = numeric(),
stringsAsFactors = FALSE
)
# Modified ANOVA function to return the p-value
fn.anova_pvalue <- function(table, varprefix) {
# Construct the column names for means and standard deviations
temp_mean <- paste0(varprefix, '_weighted_mean')
temp_sd <- paste0(varprefix, '_pooled_sd')
# Prepare data for ANOVA
means <- table[[temp_mean]]       # Column for means
sds <- table[[temp_sd]]           # Column for standard deviations
sample_sizes <- table[['n']]      # Column for sample sizes
# Construct a data frame to simulate individual observations
data <- data.frame()
for (i in seq_along(means)) {
group_data <- rnorm(n = sample_sizes[i], mean = means[i], sd = sds[i])
data <- rbind(data, data.frame(value = group_data, group = paste0("Group", i)))
}
# Perform one-way ANOVA
anova_result <- aov(value ~ group, data = data)
p_value <- summary(anova_result)[[1]]$`Pr(>F)`[1]  # Extract the p-value
return(p_value)
}
# Run ANOVA across multiple columns and store p-values in the table
for (varprefix in varprefixes) {
p_value <- fn.anova_pvalue(table1, varprefix)
p_values_table <- rbind(p_values_table, data.frame(Variable = varprefix, P_Value = p_value))
}
# Display the p-values table
print(p_values_table)
fn.chisq <- function(table, varprefix) {
temp_count <- paste0(varprefix, '_count')
temp_prop <- paste0(varprefix, '_percent')
# Check if both columns exist in the table
if (!(temp_count %in% names(table)) || !(temp_prop %in% names(table))) {
return(NA)
}
# Extract the counts and proportions
counts <- table[[temp_count]]
proportions <- table[[temp_prop]]
# Combine counts and proportions into a contingency table, removing any missing rows
contingency_table <- na.omit(cbind(counts, proportions))
# Check if there are at least two columns after combining
if (ncol(contingency_table) < 2) {
return(NA)
}
# Filter out rows with all zeros
contingency_table <- contingency_table[rowSums(contingency_table) > 0, ]
# Check if there is sufficient data for the test
if (nrow(contingency_table) < 2) {
return(NA)
}
# Perform the chi-squared or Fisher's exact test based on data sparsity
if (any(contingency_table < 5)) {
test_result <- fisher.test(contingency_table)
} else {
test_result <- chisq.test(contingency_table)
}
# Return the p-value from the test
return(test_result$p.value)
}
# List of prefixes for each count/proportion variable you want to analyze
varprefixes_counts <- c('severe_ards', 'Assist_Control', 'Other', 'Pressure_Control')
# Run chi-squared tests across multiple columns and store p-values in the table
for (varprefix in varprefixes_counts) {
p_value <- fn.chisq(table1, varprefix)
p_values_table <- rbind(p_values_table, data.frame(Variable = varprefix, P_Value = p_value))
}
# List of prefixes for each variable you want to analyze
varprefixes <- c('age_at_admission', 'bmi', 'admit_to_enrolled', 'ett_to_enrolled')
# Initialize an empty data frame to store the results
p_values_table <- data.frame(
Variable = character(),
P_Value = numeric(),
stringsAsFactors = FALSE
)
# Modified ANOVA function to return the p-value
fn.anova_pvalue <- function(table, varprefix) {
# Construct the column names for means and standard deviations
temp_mean <- paste0(varprefix, '_weighted_mean')
temp_sd <- paste0(varprefix, '_pooled_sd')
# Prepare data for ANOVA
means <- table[[temp_mean]]       # Column for means
sds <- table[[temp_sd]]           # Column for standard deviations
sample_sizes <- table[['n']]      # Column for sample sizes
# Construct a data frame to simulate individual observations
data <- data.frame()
for (i in seq_along(means)) {
group_data <- rnorm(n = sample_sizes[i], mean = means[i], sd = sds[i])
data <- rbind(data, data.frame(value = group_data, group = paste0("Group", i)))
}
# Perform one-way ANOVA
anova_result <- aov(value ~ group, data = data)
p_value <- summary(anova_result)[[1]]$`Pr(>F)`[1]  # Extract the p-value
return(p_value)
}
# Run ANOVA across multiple columns and store p-values in the table
for (varprefix in varprefixes) {
p_value <- fn.anova_pvalue(table1, varprefix)
p_values_table <- rbind(p_values_table, data.frame(Variable = varprefix, P_Value = p_value))
}
# Display the p-values table
print(p_values_table)
fn.chisq <- function(table, varprefix) {
temp_count <- paste0(varprefix, '_count')
temp_prop <- paste0(varprefix, '_percent')
# Check if both columns exist in the table
if (!(temp_count %in% names(table)) || !(temp_prop %in% names(table))) {
return(NA)
}
# Extract the counts and proportions
counts <- table[[temp_count]]
proportions <- table[[temp_prop]]
# Combine counts and proportions into a contingency table, removing any missing rows
contingency_table <- na.omit(cbind(round(counts), round(proportions)))
# Check if there are at least two columns after combining
if (ncol(contingency_table) < 2) {
return(NA)
}
# Filter out rows with all zeros
contingency_table <- contingency_table[rowSums(contingency_table) > 0, ]
# Check if there is sufficient data for the test
if (nrow(contingency_table) < 2) {
return(NA)
}
# Perform the chi-squared test or Fisher's exact test with simulation for complex tables
if (any(contingency_table < 5)) {
test_result <- fisher.test(contingency_table, simulate.p.value = TRUE)
} else {
test_result <- chisq.test(contingency_table)
}
# Return the p-value from the test
return(test_result$p.value)
}
# List of prefixes for each count/proportion variable you want to analyze
varprefixes_counts <- c('severe_ards', 'Assist_Control', 'Other', 'Pressure_Control')
# Run chi-squared tests across multiple columns and store p-values in the table
for (varprefix in varprefixes_counts) {
p_value <- fn.chisq(table1, varprefix)
p_values_table <- rbind(p_values_table, data.frame(Variable = varprefix, P_Value = p_value))
}
# Display the p-values table
print(p_values_table)
###Chi2 Tests for Survey Participation Rates - LPV-Climate Measure
# Create a matrix for the observed data
data <- matrix(c(321, 606 - 321,    # Registered Nurse (Responded, Not responded)
91,  64 - 91,      # Respiratory Therapist (Responded, Not responded)
47,  113 - 47,     # Physician (Responded, Not responded)
22,  48 - 22),     # Advanced Practice Provider (Responded, Not responded)
ncol = 2, byrow = TRUE)
# Name the rows and columns
rownames(data) <- c("Registered Nurse", "Respiratory Therapist", "Physician", "Advanced Practice Provider")
colnames(data) <- c("Responded", "Not Responded")
# Perform the Chi-squared test
chi_squared_test <- chisq.test(data)
View(data_long)
range(data_long_value)
range(data_long$value)
